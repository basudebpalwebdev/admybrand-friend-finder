// Code generated by sqlc. DO NOT EDIT.
// source: users.sql

package db

import (
	"context"
	"time"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (
	username,
	description,
	dob,
	address,
	created_at
) VALUES (
	$1, $2, $3, $4, $5
) RETURNING id, username, description, dob, address, created_at
`

type CreateUserParams struct {
	Username    string    `json:"username"`
	Description string    `json:"description"`
	Dob         time.Time `json:"dob"`
	Address     string    `json:"address"`
	CreatedAt   time.Time `json:"created_at"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.Username,
		arg.Description,
		arg.Dob,
		arg.Address,
		arg.CreatedAt,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Description,
		&i.Dob,
		&i.Address,
		&i.CreatedAt,
	)
	return i, err
}

const deleteUser = `-- name: DeleteUser :one
DELETE FROM users
WHERE id = $1
RETURNING id, username, description, dob, address, created_at
`

func (q *Queries) DeleteUser(ctx context.Context, id int64) (User, error) {
	row := q.db.QueryRowContext(ctx, deleteUser, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Description,
		&i.Dob,
		&i.Address,
		&i.CreatedAt,
	)
	return i, err
}

const findUserByUsername = `-- name: FindUserByUsername :one
SELECT id, username, description, dob, address, created_at FROM users
WHERE username = $1
`

func (q *Queries) FindUserByUsername(ctx context.Context, username string) (User, error) {
	row := q.db.QueryRowContext(ctx, findUserByUsername, username)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Description,
		&i.Dob,
		&i.Address,
		&i.CreatedAt,
	)
	return i, err
}

const getUser = `-- name: GetUser :one
SELECT id, username, description, dob, address, created_at FROM users
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetUser(ctx context.Context, id int64) (User, error) {
	row := q.db.QueryRowContext(ctx, getUser, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Description,
		&i.Dob,
		&i.Address,
		&i.CreatedAt,
	)
	return i, err
}

const listUsers = `-- name: ListUsers :many
SELECT 
	username,
	description,
	dob,
	address,
	created_at
FROM users
ORDER BY id
LIMIT $1
OFFSET $2
`

type ListUsersParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

type ListUsersRow struct {
	Username    string    `json:"username"`
	Description string    `json:"description"`
	Dob         time.Time `json:"dob"`
	Address     string    `json:"address"`
	CreatedAt   time.Time `json:"created_at"`
}

func (q *Queries) ListUsers(ctx context.Context, arg ListUsersParams) ([]ListUsersRow, error) {
	rows, err := q.db.QueryContext(ctx, listUsers, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ListUsersRow{}
	for rows.Next() {
		var i ListUsersRow
		if err := rows.Scan(
			&i.Username,
			&i.Description,
			&i.Dob,
			&i.Address,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateUserDetails = `-- name: UpdateUserDetails :one
UPDATE users
SET 
	description = $2,
	dob = $3,
	address = $4
WHERE id = $1
RETURNING id, username, description, dob, address, created_at
`

type UpdateUserDetailsParams struct {
	ID          int64     `json:"id"`
	Description string    `json:"description"`
	Dob         time.Time `json:"dob"`
	Address     string    `json:"address"`
}

func (q *Queries) UpdateUserDetails(ctx context.Context, arg UpdateUserDetailsParams) (User, error) {
	row := q.db.QueryRowContext(ctx, updateUserDetails,
		arg.ID,
		arg.Description,
		arg.Dob,
		arg.Address,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Description,
		&i.Dob,
		&i.Address,
		&i.CreatedAt,
	)
	return i, err
}
